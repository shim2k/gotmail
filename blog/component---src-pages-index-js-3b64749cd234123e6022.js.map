{"version":3,"sources":["webpack:///./src/components/landing-bio.js","webpack:///./src/pages/index.js","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/seo.js","webpack:///./src/components/header.js","webpack:///./src/components/layout.js"],"names":["Container","Object","styled_base_browser_esm","target","name","styles","OuterContainer","Description","NameHeader","propTypes","siteTitle","PropTypes","string","defaultProps","LandingBio","core_browser_esm","gatsby_browser_entry","query","render","data","site","siteMetadata","title","_1846427949","IndexPage","layout","seo","keywords","landing_bio","loader","enqueue","StaticQueryContext","React","createContext","StaticQueryDataRenderer","_ref","staticQueryData","finalData","_emotion_core__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_1___default","a","Fragment","StaticQuery","props","children","Consumer","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","assign","json","SEO","description","lang","meta","_public_static_d_2417117884_json__WEBPACK_IMPORTED_MODULE_1__","metaDescription","react_helmet__WEBPACK_IMPORTED_MODULE_3___default","htmlAttributes","titleTemplate","content","property","author","concat","length","join","Content","NavLink","Link","HomeLink","SiteHeader","Header","to","GatsbyLink","Footer","Layout","react_default","header","layout_Content","href","_755544856"],"mappings":"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","file":"component---src-pages-index-js-3b64749cd234123e6022.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\n\nconst Container = styled.div`\n  text-align: center;\n`\n\nconst OuterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: row;\n  height: 78vh;\n`\n\nconst Description = styled.p`Julia Doe\n  padding: 0;\n  margin-bottom: 1rem;\n  font-size: 1.4rem;\n`\n\nconst NameHeader = styled.h1`\n  font-size: 3.5rem;\n  margin-bottom: 0;\n`\n\nconst LandingBio = () => (\n  <StaticQuery\n    query={graphql`\n      query LandingSiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <OuterContainer>\n        <Container>\n          <NameHeader>{data.site.siteMetadata.title}</NameHeader>\n          <Description>Software Developer</Description>\n        </Container>\n      </OuterContainer>\n    )}\n  />\n)\n\nNameHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nNameHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default LandingBio\n","import React from \"react\"\n\nimport LandingBio from \"../components/landing-bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst IndexPage = () => (\n  <Layout>\n    <SEO title=\"Home\" keywords={[`shim2k`, `portfolio`, `software developer`, `web developer`]} />\n    <LandingBio />\n  </Layout>\n)\n\nexport default IndexPage\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.org/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Helmet from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nfunction SEO({ description, lang, meta, keywords, title }) {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={`%s | ${site.siteMetadata.title}`}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata.author,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ]\n        .concat(\n          keywords.length > 0\n            ? {\n                name: `keywords`,\n                content: keywords.join(`, `),\n              }\n            : []\n        )\n        .concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  keywords: [],\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.array,\n  keywords: PropTypes.arrayOf(PropTypes.string),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import { Link } from \"gatsby\"\nimport styled from \"@emotion/styled\"\nimport PropTypes from \"prop-types\"\nimport React from \"react\"\n\nconst Content = styled.div`\n  max-width: 860px;\n  padding: 1rem 1.0875rem;\n  font-size: 1.2rem;\n`\n\nconst NavLink = styled(Link)`\n  color: black;\n  margin-left: 15px;\n  text-decoration: none;\n  display: inline-block;\n  position: relative;\n\n  ::after {\n    content: \"\";\n    position: absolute;\n    width: 100%;\n    transform: scaleX(0);\n    height: 2px;\n    bottom: 0;\n    left: 0;\n    background-color: rgba(0, 0, 0, 0.8);\n    transform-origin: bottom right;\n    transition: transform 0.4s cubic-bezier(0.86, 0, 0.07, 1);\n  }\n\n  :hover::after {\n    transform: scaleX(1);\n    transform-origin: bottom left;\n  }\n`\n\nconst HomeLink = styled(NavLink)`\n  margin-left: 0;\n`\n\nconst SiteHeader = styled.header`\n  background: transparent;\n  display: flex;\n  align-content: center;\n  justify-content: center;\n`\n\nconst Header = ({ siteTitle }) => (\n  <SiteHeader>\n    <Content>\n      <p>\n        <HomeLink to=\"/\">{siteTitle}</HomeLink>\n        <NavLink to=\"/blog\">Blog</NavLink>\n        <NavLink to=\"/projects\">Projects</NavLink>\n      </p>\n    </Content>\n  </SiteHeader>\n)\n\nHeader.propTypes = {\n  siteTitle: PropTypes.string,\n}\n\nHeader.defaultProps = {\n  siteTitle: ``,\n}\n\nexport default Header\n","/**\n * Layout component that queries for data\n * with Gatsby's StaticQuery component\n *\n * See: https://www.gatsbyjs.org/docs/static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { StaticQuery, graphql } from \"gatsby\"\nimport styled from \"@emotion/styled\"\n\nimport Header from \"./header\"\nimport \"./layout.css\"\n\nconst Content = styled.div`\n  margin: 0 auto;\n  max-width: 860px;\n  padding: 0 1.0875rem 1rem;\n  padding-top: 0;\n`\n\nconst GatsbyLink = styled.a`\n  margin-left: 5px;\n`\n\nconst Email = styled.div`\n  display: flex;\n  margin-top: 5px;\n  color: gray;\n  justify-content: center;\n`\n\nconst Footer = styled.footer`\n  display: flex;\n  justify-content: center;\n`\n\nconst Layout = ({ children }) => (\n  <StaticQuery\n    query={graphql`\n      query SiteTitleQuery {\n        site {\n          siteMetadata {\n            title\n          }\n        }\n      }\n    `}\n    render={data => (\n      <>\n        <Header siteTitle={data.site.siteMetadata.title} />\n        <Content>\n          <main>{children}</main>\n          <Footer>\n            <GatsbyLink href=\"https://twitter.com/shim2k\">@shim2k</GatsbyLink>\n            <GatsbyLink href=\"https://github.com/Shim2k\">github.com/shim2k</GatsbyLink>\n          </Footer>\n        </Content>\n      </>\n    )}\n  />\n)\n\nLayout.propTypes = {\n  children: PropTypes.node.isRequired,\n}\n\nexport default Layout\n"],"sourceRoot":""}