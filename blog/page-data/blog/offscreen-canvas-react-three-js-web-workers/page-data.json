{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog/offscreen-canvas-react-three-js-web-workers","webpackCompilationHash":"0254b86369c8ce8ab333","result":{"data":{"markdownRemark":{"html":"<p>Three.js gives us the ability to create and display animated 3D graphics inside the browser.\nIt uses WebGL, Canvas and SVG in order to render the graphics.</p>\n<p>Unfortunately, complex scenes can take time to render into the screen and while doing so, the main thread is too busy to handle events and process other logic, which will freeze your application amd make it unresponsive while Three.js rendering is in process.</p>\n<p>In order to solve this problem, we are going to use to use two Web APIs interfaces:</p>\n<h3>Web Workers</h3>\n<p>Web Workers are a way for web applications to run scripts in background threads.\nA worker thread can perform heavy tasks without interfering directly with the main thread, and thus user experience is not undermined.</p>\n<p>Workers can only interact with the main thread by listening to the <code class=\"language-text\">onmessage</code> event and by sending a message with the <code class=\"language-text\">postMessage</code> method.</p>\n<p>They also have various limitation including not being able to access the DOM and therefore cannot create or update DOM elements</p>\n<h3>OffscreenCanvas</h3>\n<p>The OffscreenCanvas interface for canvas is available as of Chrome 69 and Firefox 46 versions\nand it provides us with the capability to render canvas off screen, as the name suggests. it is available in both the window (the main thread) and worker contexts.</p>\n<p>Because Three.js uses canvas in order to render its 3D elements, we should be able to offload the Three.js rendering into OffscreenCanvas under a Web Worker.\nThis can boost the performance and responsiveness of web applications significantly.</p>\n<h1>Integrating into React</h1>\n<p>This tutorial assumes a Create-React-App 2.0 project or a Webpack-based build process (can be an ejected CRA)</p>\n<p>First of all, we would like to add Web Workers into our build system.\nFortunately, CRA 2.0 already comes with Web Workers support opt-in, with the convention that files ending with .worker.js will be Workers</p>\n<p>For ejected CRA projects you need to install the <code class=\"language-text\">worker-loader</code> and <code class=\"language-text\">thread-loader</code> packages add the following module in your webpack config:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  test<span class=\"token punctuation\">:</span> <span class=\"token regex\">/\\.worker\\.(js|jsx|mjs)$/</span><span class=\"token punctuation\">,</span>\n  include<span class=\"token punctuation\">:</span> paths<span class=\"token punctuation\">.</span>appSrc<span class=\"token punctuation\">,</span>\n  use<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>\n    require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"worker-loader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token comment\">// This loader parallelizes code compilation, it is optional but</span>\n    <span class=\"token comment\">// improves compile time on larger projects</span>\n    require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"thread-loader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">{</span>\n      loader<span class=\"token punctuation\">:</span> require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-loader\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n      options<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// @remove-on-eject-begin</span>\n        babelrc<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n        presets<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>require<span class=\"token punctuation\">.</span><span class=\"token function\">resolve</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"babel-preset-react-app\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n        <span class=\"token comment\">// @remove-on-eject-end</span>\n        <span class=\"token comment\">// This is a feature of `babel-loader` for webpack (not Babel itself).</span>\n        <span class=\"token comment\">// It enables caching results in ./node_modules/.cache/babel-loader/</span>\n        <span class=\"token comment\">// directory for faster rebuilds.</span>\n        cacheDirectory<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n        highlightCode<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n  <span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>For more information on how to integrate this webpack loader refer to <a href=\"https://github.com/webpack-contrib/worker-loader\">worker-loader</a>.</p>\n<p>So now that we have Web Workers enabled, lets start by creating a component to display our Three.js scenes:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// component.jsx</span>\n\n<span class=\"token keyword\">import</span> React<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>Component<span class=\"token punctuation\">}</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'react'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// importing a file ending with .worker.js to be the worker:</span>\n<span class=\"token keyword\">import</span> Worker <span class=\"token keyword\">from</span> <span class=\"token string\">'./scene.worker'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SceneView</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">Component</span> <span class=\"token punctuation\">{</span>\n\n    <span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">props</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">super</span><span class=\"token punctuation\">(</span>props<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">// Instantiating the worker</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>worker <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Worker</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n            isLoaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function-variable function\">componentDidMount</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>canvas<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span>clientHeight<span class=\"token punctuation\">,</span> clientWidth<span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// Creating an OffscreenCanvas element. </span>\n        <span class=\"token comment\">// Rendering changes in this object will be reflected</span>\n        <span class=\"token comment\">// and displayed on the original canvas.</span>\n        <span class=\"token keyword\">const</span> offscreenCanvas <span class=\"token operator\">=</span> canvas<span class=\"token punctuation\">.</span><span class=\"token function\">transferControlToOffscreen</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// worker.postMessage is a method </span>\n        <span class=\"token comment\">// which sends a message to the worker's inner scope.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>\n            type<span class=\"token punctuation\">:</span> <span class=\"token string\">'run'</span><span class=\"token punctuation\">,</span>\n            canvas<span class=\"token punctuation\">:</span> offscreenCanvas<span class=\"token punctuation\">,</span>\n            sizes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">:</span> clientWidth<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> clientHeight<span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>offscreenCanvas<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">// worker.onmessage event will be invoked by the worker</span>\n        <span class=\"token comment\">// whenever the rendering process is done.</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>worker<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">event</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'resolved'</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span><span class=\"token function\">setState</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>isLoaded<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">componentWillUnmount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      \n        <span class=\"token comment\">// Sending a message to the worker </span>\n        <span class=\"token comment\">// so it can stop the Three.js animation process</span>\n        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>worker<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'stop'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">render</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>\n            <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span>canvas\n                    style<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> <span class=\"token string\">'100%'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>\n                    ref<span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">view</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>canvas <span class=\"token operator\">=</span> view\n                    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token operator\">></span>\n                <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>canvas<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>state<span class=\"token punctuation\">.</span>isLoaded <span class=\"token operator\">?</span> <span class=\"token keyword\">null</span> <span class=\"token punctuation\">:</span> <span class=\"token operator\">&lt;</span>div<span class=\"token operator\">></span>Loading<span class=\"token operator\">...</span><span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>div<span class=\"token operator\">></span>\n        <span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The component will instantiate a worker in its constructor,\nthen after it is mounted we handle the the communication with the worker.</p>\n<p>This is the object that we are sending to the worker:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token punctuation\">{</span>\n  type<span class=\"token punctuation\">:</span> <span class=\"token string\">'run'</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// indicates which function in the worker's scope we would like to execute.</span>\n  canvas<span class=\"token punctuation\">:</span> offscreenCanvas<span class=\"token punctuation\">,</span> canvas<span class=\"token punctuation\">,</span> <span class=\"token comment\">// contains the OffscreenCanvas element that the worker will use for rendering</span>\n  sizes<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">{</span>width<span class=\"token punctuation\">:</span> clientWidth<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">:</span> clientHeight<span class=\"token punctuation\">}</span> <span class=\"token comment\">// contains the canvas sizes which are not available under the OffscreenObject</span>\n<span class=\"token punctuation\">}</span>    </code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Let's create the worker file:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-javascript line-numbers\"><code class=\"language-javascript\"><span class=\"token comment\">// scene.worker.js</span>\n\n<span class=\"token keyword\">import</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">as</span> <span class=\"token constant\">THREE</span> <span class=\"token keyword\">from</span> <span class=\"token string\">'three'</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// We define the handlers for the various message types</span>\n<span class=\"token keyword\">const</span> handlers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n    run<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\nself<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">onmessage</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">e</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    \n    <span class=\"token comment\">// We check whether we have a handler for this message type.</span>\n    <span class=\"token comment\">// If so, we call it.</span>\n    <span class=\"token keyword\">const</span> fn <span class=\"token operator\">=</span> handlers<span class=\"token punctuation\">[</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fn<span class=\"token punctuation\">)</span> <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token template-string\"><span class=\"token template-punctuation string\">`</span><span class=\"token string\">no handler for type: </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">.</span>type<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token template-punctuation string\">`</span></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">fn</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">createCylider</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> geometry <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>CylinderGeometry</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token number\">32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> material <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>MeshBasicMaterial</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>color<span class=\"token punctuation\">:</span> <span class=\"token string\">'red'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Mesh</span><span class=\"token punctuation\">(</span>geometry<span class=\"token punctuation\">,</span> material<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">run</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">message</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  \n  <span class=\"token keyword\">let</span> <span class=\"token punctuation\">{</span> canvas <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> message<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">let</span> cylider <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span><span class=\"token function\">createCylider</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n  \n  <span class=\"token keyword\">let</span> scene <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>Scene</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  scene<span class=\"token punctuation\">.</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>cylider<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">let</span> renderer <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">THREE<span class=\"token punctuation\">.</span>WebGLRenderer</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>canvas<span class=\"token punctuation\">,</span> alpha<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> antialias<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span> preserveDrawingBuffer<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token operator\">...</span>\n  \n  self<span class=\"token punctuation\">.</span><span class=\"token function\">postMessage</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">{</span>type<span class=\"token punctuation\">:</span> <span class=\"token string\">'resolved'</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The onmessage event handler is implemented and routes the message to the right function.</p>\n<p>As you can see, the <code class=\"language-text\">run</code> function is creating a Three.js cylinder element, a scene and a renderer.\nOnce rendered</p>\n<p>It is also emits an event once the rendering is completed to let the React component know about it.</p>\n<h1>Conclusion</h1>\n<p>If you are using Three.js heavily inside your React application you might want to consider using OffscreenCanvas\nand Web Workers to improve the responsiveness and performance of your appm and make better use of multi-core systems.\nOf course this code this very minimal but its purpose is to encourage more use of background rendering for Three.js.</p>","excerpt":"Three.js gives us the ability to create and display animated 3D graphics inside the browser.\nIt uses WebGL, Canvas and SVG in order to render the graphics…","frontmatter":{"date":"12 August, 2019","path":"/blog/offscreen-canvas-react-three-js-web-workers","title":"Three.js, Web Workers and OffscreenCanvas in React"},"fields":{"readingTime":{"text":"5 min read"}}}},"pageContext":{"isCreatedByStatefulCreatePages":false}}}